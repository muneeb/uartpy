#!/usr/bin/python
import histogram
import missratio

class LRUNTAModel:
    def __init__(rdist_hist, patch_list):
        self.rdist_hist = rdist_hist
        self.rdist2sdist = self._calc_rdist2sdist(rdist_hist, patch_list)


    def _calc_rdist2sdist(patch_list):
        rdist_pdf = histogram.Pdf(rdist_hist)
        rdist_rcdf = histogram.Cdf_r(rdist_hist)
        rdist_sdist = {}

        for rdist, rcdf in rdist_rcdf:
            if len(rdist_sdist) == 0:
                prev_rdist = rdist
                prev_sdist = rdist
                rdist_sdist[rdist] = rdist
            else:
                prev_sdist += (rdist - prev_rdist) * rcdf
                prev_rdist = rdist
                rdist_sdist[rdist] = prev_sdist

        return rdist_sdist

    def sdist_hist(filtered_rdist_hist=self.rdist_hist):
        sdist_hist = {}
        rdist_sdist_map = lru_sdist(rdist_hist)

        for (rdist, count) in filtered_rdist_hist.items():
            sdist = int(round(rdist_sdist_map[rdist]))
            sdist_hist[sdist] = sdist_hist.get(sdist, 0) + count

        return sdist_hist

    def miss_ratio(filtered_rdist_hist=self.rdist_hist)
        sdist_hist_items = sdist_hist(filtered_rdist_hist).items()
        sdist_hist_items.sort(lambda (k0, v0), (k1, v1): cmp(k0, k1))

        ref_count = sum(filtered_rdist_hist.values())
        miss_count = ref_count
        miss_ratio = []
        for sdist, count in sdist_hist_items:
            miss_ratio.append((sdist, float(miss_count) / ref_count))
            miss_count -= count

        return missratio.MissRatio(miss_ratio)

    def miss_ratio_range(cache_size_range,
                         filtered_rdist_hist = self.rdist_hist):
        mr = miss_ratio(rdist_hist, filtered_rdist_hist)
        mr_out = []
        for cache_size in cache_size_range:
            mr_out.append((cache_size, mr[cache_size]))
        return missratio.MissRatio(mr_out)
